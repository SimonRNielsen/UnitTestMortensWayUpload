using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
[assembly: InternalsVisibleTo("UnitTestMortensWay")]

namespace Testing
{
    internal class BFS
    {
        public static Tile BFSMethod(Tile startNode, Tile endNode)
        {
            Queue<Tile> queue = new Queue<Tile>();
            startNode.Discovered = true; //The first node is marked as discovered, so it is not processed agaain
            queue.Enqueue(startNode); //The first node is added to the queue.
            while (queue.Count > 0) //Runs as long as the queue isn't empty
            {
                Tile currentTile = queue.Dequeue(); //The current tile is taken from the queue. 
                if (currentTile == endNode) //If the current tile is the endnode, the destination has ben reached, and is returned.
                {
                    return currentTile;
                }
                foreach (Edge e in currentTile.Edges) //Looks at all the edges from the current tile
                {
                    if (e.To != null) //To make sure there is no mistakes, as non-walkable tiles returns null and should be ignored. 
                    {
                        Tile neighbor = e.To; //The neighbor of the current tile is the destination of the edge
                        if (!neighbor.Discovered) //If the neighbor isn't already discovered, it is marked ad discovered, the current tile is set as parent, and it is added to the queue to be processed later. 
                        {
                            neighbor.Discovered = true;
                            neighbor.Parent = currentTile;
                            queue.Enqueue(neighbor);
                        }
                    }
                }

            }
            return null;

        }
        /// <summary>
        /// Returns a list of tiles, following the path generated by the BFSMethod.
        /// </summary>
        /// <param name="endNode">The tile where the BFS ended</param>
        /// <param name="startNode">The Tile where the BFS started.</param>
        /// <returns></returns>
        public static List<Tile> FindPath(Tile endNode, Tile startNode)
        {
            List<Tile> pathOfNodes = new List<Tile>();
            pathOfNodes.Add(endNode);
            while (endNode != startNode)
            {

                pathOfNodes.Add(endNode.Parent);
                endNode = endNode.Parent;
            }
            pathOfNodes.Reverse();
            return pathOfNodes;
        }
    }
}
